version: "3.4"
services:
  db:
    container_name: postgres
    image: postgres:alpine
    volumes:
      - dbdata:/pgdata
    env_file: db/env
  app:
    container_name: app
    env_file: backend/env
    build: 
      context : backend/
      dockerfile: Dockerfile
      target: local
      args: 
       - SCENARIO=local
    entrypoint: bash -c './wait-for-it.sh db:5432 -- python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000'
    volumes:
      - ./backend:/backend
      - ./backend/static:/backend/static  # <-- bind the static volume
      - ./backend/media:/backend/media  # <-- bind the media volume
    healthcheck:
      test: curl --fail http://localhost:8000/admin/ || exit
    depends_on: 
      - db 
    links:
      - cache
  
  celery:
    container_name: celery
    env_file: backend/env
    image: cryptoweb_app
    entrypoint: celery -A backend worker -l info
    volumes:
      - ./backend:/backend
    depends_on:
      - app
      - cache
    links:
      - app:app
      - cache:cache

  channels:
    container_name: channels
    env_file: backend/env
    image: cryptoweb_app
    entrypoint: daphne backend.asgi:application --bind 0.0.0.0 --port 9000
    volumes:
      - ./backend:/backend
    depends_on:
      - app
      - cache
    links:
      - app:app
      - cache:cache
    


  cache:
    image: redis:alpine
    container_name: redis
  
  frontend:
    build: 
      context : frontend/
      dockerfile: Dockerfile
    container_name: react
    volumes:
      - ./frontend/:/frontend
      - modules:/frontend/node_modules
    env_file: frontend/env
    ports:
      - '3000:3000'
    links:
      - app:app
      - proxy:proxy
    depends_on:
      - app
  
  proxy:
    container_name: proxy_nginx
    image: nginx:alpine
    volumes:
      - ./proxy/:/etc/nginx/conf.d
      - ./backend/static:/backend/static  # <-- bind the static volume
      - ./backend/media:/backend/media  # <-- bind the media volume
      - ./frontend/build:/var/www/frontend
    ports:
      - "80:80"
      - "443:443"
    links:
      - app:app
    depends_on:
      - app
volumes:
  dbdata:
  backend:
  modules:
  static_volume:
  media_volume: